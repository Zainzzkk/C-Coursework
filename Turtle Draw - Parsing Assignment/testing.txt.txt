In terms of testing this, I believe I have fully tested my program as much as possible.  Please note that I have included some broken files in the zip file to test instructions which should fail the code.  Most my testing is whitebox testing, though I have attempted to try some blackbox testing, however this has been difficult.  However, with using broken files or incorrect inputs (such as capitals or spaces between : = for example, I have done some black box testing.  The only test harness I used was loops to ensure they fail or pass. 

To run testing, please make testparse, testinterp or testextension.  No leaks present meaning any leaks are from SDL.  However, makefile struggles with _s with SDL due to SDL memory leaks.

Parser -  There is a total of 1095 lines of testing code for my parser.  Every line of my code has been tested to make sure it works and this code was made function by function, test by test.  I have used loops and other characters/null character to make sure that functions cannot be bypassed by any incorrect input.  I have tried using capitals followed by an incorrect character, or mixing upper and lowercase.  The basis of my testing was to make sure it works with correct input, and obvious incorrect input and then attempting to break the function.  All functions held up to this method.  I have included simpbroke_c.ttl which will fail the parser as has LTt in it, and spiral2broken_c.ttl which will pass the parser as grammar is correct but should fail interpreter.

Interpreter - 1431 lines of testing code.  Again the same strategy was used to try and break the functions and they all held up to the test.  For example, with the angle, have made sure it wraps around.  And same for the XY positions to make sure it wraps around and puts it to the correct co-ordinates.  I have also made sure to make sure that only set VARs can be used for FD for example, and attempted to break that as well.  I have tried to use every single character with every single instruction to make sure they all fail.  Also have attempted to break the stack, including using unset variables.  And finally, have tested that spiral2broken_c.ttl does not pass the interpreter which it doesn't.  The final thing I did was to add the file read function, ensuring that everything is tested first. 

Extension - testing this was very hard so have very few tests.  Mainly due to scanf calls.  However, for testing this, you will need to enter a character into terminal or number.  